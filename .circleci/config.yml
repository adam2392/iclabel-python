version: 2.1

_xvfb: &xvfb
  name: Start Xvfb virtual framebuffer
  command: |
    echo "export DISPLAY=:99" >> $BASH_ENV
    /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1280x1024x24 -ac +extension GLX +render -noreset -nolisten tcp -nolisten unix

jobs:
    build_doc:
      docker:
        - image: cimg/base:stable-20.04
      steps:
        - restore_cache:
            keys:
              - source-cache-iclabel

        - checkout

        - run:
            name: Complete checkout
            command: |
              if ! git remote -v | grep upstream; then
                git remote add upstream https://github.com/adam2392/mne-icalabel.git
              fi
              git remote set-url upstream https://github.com/adam2392/mne-icalabel.git
              git fetch upstream

        - save_cache:
            key: source-cache-iclabel
            paths:
              - ".git"

        - run:
            name: Check-skip
            command: |
              set -e
              export COMMIT_MESSAGE=$(git log --format=oneline -n 1);
              if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$COMMIT_MESSAGE" == *"[skip circle]"* ]] || [[ "$COMMIT_MESSAGE" == *"[circle skip]"* ]]); then
                echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
                circleci-agent step halt;
              fi

        - add_ssh_keys:
            fingerprints:
              - "d6:88:6b:a0:80:bf:14:8e:80:2e:ed:11:52:26:37:68"

        - run:
            name: Set BASH_ENV
            command: |
              set -e
              ./scripts/setup_circleci.sh
              sudo apt install -qq graphviz optipng python3.8-venv python3-venv libxft2 ffmpeg
              python3.8 -m venv ~/python_env
              echo "set -e" >> $BASH_ENV
              echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
              echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci" >> $BASH_ENV
              echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
              echo "export DISPLAY=:99" >> $BASH_ENV
              echo "source ~/python_env/bin/activate" >> $BASH_ENV
              mkdir -p ~/.local/bin
              ln -s ~/python_env/bin/python ~/.local/bin/python
              echo "BASH_ENV:"
              cat $BASH_ENV
              mkdir -p ~/mne_icalabel_data
              touch pattern.txt;

        # make sure pandoc is on the system
        - run: sudo apt update && sudo apt install -y pandoc optipng

        - run:
            name: Merge with upstream
            command: |
              echo $(git log -1 --pretty=%B) | tee gitlog.txt
              echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
              if [[ $(cat merge.txt) != "" ]]; then
                echo "Merging $(cat merge.txt)";
                git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
              fi

        # make sure pandoc is on the system
        - run:
            name: Install relevant dependencies
            command: |
              ./tools/circleci_dependencies.sh

        - run:
            <<: *xvfb

        # Load pip cache
        - restore_cache:
            keys:
              - pip-cache
        - restore_cache:
            keys:
              - user-install-bin-cachev1
              
        - run:
            name: Get Python running and install dependencies
            command: |
              pip install --upgrade --progress-bar off -r requirements.txt
              pip install --upgrade --progress-bar off -r requirements_testing.txt
              pip install --upgrade --progress-bar off -r requirements_doc.txt
              pip install -e .

        - save_cache:
            key: pip-cache
            paths:
              - ~/.cache/pip

        - save_cache:
            key: user-install-bin-cachev1
            paths:
              - ~/.local/lib/python3.8/site-packages
              - ~/.local/bin

        # Look at what we have and fail early if there is some library conflict
        - run:
            name: Check installation
            command: |
               which python
               python -c "import mne_icalabel;"
               python -c "import mne; mne.sys_info()"
               LIBGL_DEBUG=verbose python -c "import matplotlib.pyplot as plt; plt.figure()"
               python -c "import mne; mne.set_config('MNE_LOGGING_LEVEL', 'info')"
               python -c "import mne; level = mne.get_config('MNE_LOGGING_LEVEL'); assert level.lower() == 'info', repr(level)"
               python -c "import numpy; numpy.show_config()"

        # - run:
        #     name: Get data
        #     command: |
        #       python setup.py develop --user

        # Build doc
        - run:
            name: make html
            command: |
              cd doc;
              make html;

        # Save the outputs
        - store_artifacts:
            path: doc/_build/html/
            destination: dev
        - persist_to_workspace:
            root: doc/_build
            paths:
              - html

        # Keep these separate, maybe better in terms of size limitations (?)
        # - save_cache:
        #     key: data-cache-sample
        #     paths:
        #       - ~/.mne
        #       - ~/mne_data/MNE-sample-data

    doc-deploy:
        docker:
          - image: node:8
        steps:
          - checkout

          - attach_workspace:
              at: doc/_build

          - restore_cache:
              keys:
                - website-cache

          - run:
              name: Install and configure dependencies
              command: |
                npm install --global gh-pages@3.0
                git config --global user.email "circle@mne.com"
                git config --global user.name "Circle Ci"

          - add_ssh_keys:
              fingerprints:
                - "d6:88:6b:a0:80:bf:14:8e:80:2e:ed:11:52:26:37:68"

          - run:
              # push built doc into the `dev` directory on the `gh-pages` branch
              name: Deploy doc to gh-pages branch
              command: |
                if [ "${CIRCLE_BRANCH}" == "main" ]; then
                  echo "Deploying dev doc for ${CIRCLE_BRANCH}.";
                  gh-pages --dotfiles --message "doc updates [skip ci] (${CIRCLE_BUILD_NUM})" --dist doc/_build/html --dest ./dev
                else
                  echo "Deploying stable doc for ${CIRCLE_BRANCH}.";
                  gh-pages --dotfiles --message "doc updates [skip ci] (${CIRCLE_BUILD_NUM})" --dist doc/_build/html --dest ./stable
                fi;

          - save_cache:
              key: website-cache
              paths:
                - ~/mne-icalabel

workflows:
  version: 2

  default:
    jobs:
      - build_doc
      - doc-deploy:
          requires:
            - build_doc
          filters:
            branches:
              only:
                - main

