name: "unit_tests"
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.type }}
  cancel-in-progress: true
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "*"

jobs:
  # Run style tests
  style:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # install only the dependencies required for style
      - name: Install pip
        run: |
          pip install --upgrade --progress-bar off pip setuptools wheel
          pip install --upgrade --upgrade-strategy eager --progress-bar off black check-manifest codespell flake8 flake8-array-spacing isort mypy pydocstyle
      - name: Run style & documentation tests
        run: make run-checks

  # Run installation tests
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9, "3.10"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --upgrade --progress-bar off pip setuptools wheel
          pip install $STD_ARGS --only-binary ":all:" PyQt6 PyQt6-sip PyQt6-Qt6
          
      # build with sdist directly
      - uses: actions/checkout@v3
      - name: Build sdist
        run: python setup.py sdist
      - name: Install sdist
        run: pip install ./dist/mne-icalabel-*
      - name: Clean up working directory
        run: rm -rf ./*
      - name: Try importing mne_icalabel
        run: python -c 'import mne_icalabel; print(mne_icalabel.__version__)'
      - name: Remove sdist install
        run: pip uninstall -y mne-icalabel
      # build with build wheet
      - uses: actions/checkout@v3
      - name: Build wheel
        run: python setup.py bdist_wheel
      - name: Install wheel
        run: pip install ./dist/mne_icalabel-*.whl
      - name: Clean up working directory
        run: rm -rf ./*
      - name: Try importing mne_icalabel
        run: python -c 'import mne_icalabel; print(mne_icalabel.__version__)'
      - name: Remove wheel install
        run: pip uninstall -y mne-icalabel

      - uses: actions/checkout@v3
      - name: Test extras install
        run: |
          pip install .[full]
          python -c 'import mne_icalabel; print(mne_icalabel.__version__)'

  # Run unit tests
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, "3.10"] # oldest and newest supported versions
        mne-version: [mne-stable, mne-main]

        include:
          - os: ubuntu-latest
            python-version: 3.8
            mne-version: mne-main
          - os: ubuntu-latest
            python-version: 3.9
            mne-version: mne-main

    env:
      TZ: Europe/Berlin
      FORCE_COLOR: true
      DISPLAY: ":99.0"
      MNE_LOGGING_LEVEL: "info"
      OPENBLAS_NUM_THREADS: "1"
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/checkout@v3

      - name: Install mne-icalabel
        run: |
          pip install --upgrade --progress-bar off pip setuptools wheel
          pip install --progress-bar off .

      - name: Install dependencies
        run: |
          pip install --upgrade --upgrade-strategy eager --progress-bar off -r requirements_testing.txt

      - name: Install MNE (main)
        if: "matrix.mne-version == 'mne-main'"
        run: |
          git clone --depth 1 https://github.com/mne-tools/mne-python.git -b main
          pip install --force-reinstall --progress-bar off ./mne-python

      - name: Install MNE (stable)
        if: "matrix.mne-version == 'mne-stable'"
        run: |
          pip install --force-reinstall --progress-bar off mne

      - name: Display versions and environment information
        run: |
          echo $TZ
          date
          python --version
          which python

      - name: "Show infos"
        shell: bash -el {0}
        run: mne sys_info

      - name: Run pytest
        shell: bash
        run: |
          python -m pytest ./mne_icalabel --cov=mne_icalabel --cov-report=xml --cov-config=setup.cfg --verbose --ignore mne-python

      - name: Upload coverage stats to codecov
        if: "matrix.os == 'ubuntu-latest'"
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [style, build, test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install requirements
        run: |
          pip install --upgrade --progress-bar off pip setuptools wheel twine

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download package distribution files
        uses: actions/download-artifact@v3
        with:
          name: package
          path: dist

      - name: Generate release notes
        run: |
          python scripts/release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md

      - name: Publish package to PyPI
        run: |
          twine upload -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} dist/*

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
          prerelease: ${{ contains(env.TAG, 'rc') }}
          files: |
            dist/*
